((fib (?n-2 ?rec n)
      (((f 0 1 2) 1) ((f 1 1 3) 2) ((f 1 2 4) 3) ((f 2 3 5) 5)
        ((f 3 5 6) 8) ((f 5 8 7) 13))
      (+ ?rec ?n-2))
 (fib (?n-2 ?rec n)
      (((f 0 1 2) 1) ((f 1 1 3) 2) ((f 1 2 4) 3) ((f 2 3 5) 5)
        ((f 3 5 6) 8) ((f 5 8 7) 13))
      (+ ?rec ?n-2))
 (filter
   (?rec p xs)
   (((f '(4 2) even? '(3 4 2 1)) (4 2))
     ((f '() even? '(1)) ())
     ((f '(2 1) (lambda (x) (not (= x 0))) '(0 2 1 0)) (2 1))
     ((f '() (lambda (x) (not (= x 0))) '(0)) ()))
   ?rec)
 (filter
   (?rec p xs)
   (((f '(2) even? '(4 2 1)) (4 2))
     ((f '() even? '(2 1)) (2))
     ((f '(2 1) (lambda (x) (not (= x 0))) '(3 0 2 1 0)) (3 2 1))
     ((f '(1) (lambda (x) (not (= x 0))) '(2 1 0)) (2 1))
     ((f '() (lambda (x) (not (= x 0))) '(1 0)) (1)))
   (cons (car xs) ?rec))
 (deep-even-only
   (?rec l)
   (((f '(2 4) '(1 2 3 4)) (2 4)) ((f '(4) '(3 4)) (4)))
   ?rec)
 (deep-even-only
   (?rec l)
   (((f '(4) '(2 3 4)) (2 4)) ((f '() '(4)) (4)))
   (cons (car l) ?rec))
 (deep-even-only
   (?rec-car ?rec l)
   (((f '(4) '(2 4 6) '((3 4) 2 4 6 7)) ((4) 2 4 6)))
   (cons ?rec-car ?rec))
 (even-only
   (?rec l)
   (((f '(2 4) '(1 2 3 4)) (2 4)) ((f '(4) '(3 4)) (4)))
   ?rec)
 (even-only
   (?rec l)
   (((f '(4) '(2 3 4)) (2 4)) ((f '() '(4)) (4)))
   (cons (car l) ?rec))
 (deep-size (?rec l) (((f 2 '(a b c)) 3)) (add1 ?rec))
 (deep-size
   (?rec-car ?rec l)
   (((f 2 3 '((a (b)) c d e)) 5))
   (+ ?rec ?rec-car))
 (countdown
   (?rec n)
   (((f '(3 2 1 0) 4) (4 3 2 1 0))
     ((f '(2 1 0) 3) (3 2 1 0))
     ((f '(1 0) 2) (2 1 0))
     ((f '(0) 1) (1 0)))
   (cons n ?rec))
 (longer?
   (?rec l s)
   (((f #t '(a b c) '(a b)) #t) ((f #t '(b c) '(b)) #t) ((f #f '(a b) '(a b c)) #f)
     ((f #f '(b) '(b c)) #f) ((f #f '(1 2) '(5 6 7)) #f)
     ((f #f '(2) '(6 7)) #f))
   ?rec)
 (addlists
   (?rec l s)
   (((f '(7 9) '(1 2 3) '(4 5 6)) (5 7 9))
     ((f '(9) '(2 3) '(5 6)) (7 9))
     ((f '() '(3) '(6)) (9)))
   (cons (+ (car s) (car l)) ?rec))
 (nat>=
   (?rec a b)
   (((f #t 2 1) #t)
     ((f #t 3 1) #t)
     ((f #f 1 3) #f)
     ((f #t 1 1) #t))
   ?rec)
 (nat>
   (?rec a b)
   (((f #t 2 1) #t) ((f #t 3 1) #t) ((f #f 1 3) #f))
   ?rec)
 (same-length?
   (?rec l s)
   (((f #t '(1 2) '(3 4)) #t) ((f #t '(2) '(4)) #t) ((f #f '(1 2 3) '(4 5)) #f)
     ((f #f '(2 3) '(5)) #f) ((f #f '(1 2) '(3 4 5)) #f)
     ((f #f '(2) '(4 5)) #f))
   ?rec)
 (sum (?rec n) (((f 15 6) 21)) (+ n ?rec))
 (flatten
   (?rec ll)
   (((f '(2) '(1 2)) (1 2))
     ((f '() '(2)) (2))
     ((f '(2 3) '(1 (2 3))) (1 2 3)))
   (cons (car ll) ?rec))
 (flatten
   (?rec-car ?rec ll)
   (((f '(1 2) '(3 4 5 6) '((1 2) (3 4) (5 6))) (1 2 3 4 5 6))
     ((f '(a b) '(c d e) '(((a b)) c d e)) (a b c d e)))
   (append ?rec-car ?rec))
 (factorial (?rec n) (((f 120 6) 720)) (* n ?rec))
 (length (?rec xs) (((f 6 '(1 2 3 4 5 6 7)) 7)) (add1 ?rec))
 (length
   (?rec xs)
   (((f 0 '(c)) 1) ((f 1 '(b c)) 2) ((f 2 '(a b c)) 3))
   (add1 ?rec))
 (even-length?
   (?rec xs)
   (((f #t '(1)) #f) ((f #f '(2 1)) #t) ((f #t '(3 2 1)) #f))
   (not ?rec))
 (compose-list
   (?rec fs x)
   (((f 36
        (list
          (lambda (x) (+ x 1))
          (lambda (x) (* x 3))
          (lambda (x) (+ x 2)))
        10)
      37)
     ((f 12 (list (lambda (x) (* x 3)) (lambda (x) (+ x 2))) 10)
       36)
     ((f 10 (list (lambda (x) (+ x 2))) 10) 12))
   ((car fs) ?rec))
 (map (?rec f xs)
      (((f '(3 2) (lambda (x) (+ x 1)) '(3 2 1)) (4 3 2)) ((f '(2) (lambda (x) (+ x 1)) '(2 1)) (3 2))
        ((f '() (lambda (x) (+ x 1)) '(1)) (2))
        ((f '(6 3) (lambda (x) (* x 3)) '(3 2 1)) (9 6 3))
        ((f '(3) (lambda (x) (* x 3)) '(2 1)) (6 3))
        ((f '() (lambda (x) (* x 3)) '(1)) (3)))
      (cons (f (car xs)) ?rec))
 (stutter
   (?rec xs)
   (((f '(2 2 3 3) '(1 2 3)) (1 1 2 2 3 3)))
   (cons (car xs) (cons (car xs) ?rec)))
 (append123
   (?rec l)
   (((f '(5 6 1 2 3) '(4 5 6)) (4 5 6 1 2 3)))
   (cons (car l) ?rec))
 (sentence* (?rec l) (((f '() (list 'hello)) (hello))) l)
 (product*
   (?rec l)
   (((f 1 (list 3)) 3) ((f 20 (list 2 4 5)) 40))
   (* (car l) ?rec)))
